{/////////////////////////////////////////////////////////////////////////
//
//  Dos Navigator Open Source 1.51.09
//  Based on Dos Navigator (C) 1991-99 RIT Research Labs
//
//  This programs is free for commercial and non-commercial use as long as
//  the following conditions are aheared to.
//
//  Copyright remains RIT Research Labs, and as such any Copyright notices
//  in the code are not to be removed. If this package is used in a
//  product, RIT Research Labs should be given attribution as the RIT Research
//  Labs of the parts of the library used. This can be in the form of a textual
//  message at program startup or in documentation (online or textual)
//  provided with the package.
//
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are
//  met:
//
//  1. Redistributions of source code must retain the copyright
//     notice, this list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//  3. All advertising materials mentioning features or use of this software
//     must display the following acknowledgement:
//     "Based on Dos Navigator by RIT Research Labs."
//
//  THIS SOFTWARE IS PROVIDED BY RIT RESEARCH LABS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
//  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
//  DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR
//  ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
//  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
//  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
//  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
//  IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
//  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
//  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//  The licence and distribution terms for any publically available
//  version or derivative of this code cannot be changed. i.e. this code
//  cannot simply be copied and put under another distribution licence
//  (including the GNU Public Licence).
//
//////////////////////////////////////////////////////////////////////////}

FUNCTION AFileClose (Handle: Word): Boolean;
ASSEMBLER;
ASM
   MOV BX, Handle;                                    { DOS file handle }
   MOV AH, $3E;                                       { Close function }
   PUSH BP;                                           { Store register }
   INT $21;                                           { Close the file }
   POP BP;                                            { Reload register }
   MOV AL, True;                                      { Preset true }
   JNC @@Exit1;                                       { Return success }
   MOV AL, False;                                     { Return failure }
 @@Exit1:
END;

FUNCTION AFileOpen (Var FileName: AsciiZ; Mode: Word): Word;
ASSEMBLER;
ASM
   MOV AX, Mode;                                      { Mode to open file }
   MOV BL, lAPI
   AND BL, lWin95
   OR  BL, BL
   JNZ @@Win95Lfn
   XOR CX, CX;                                        { No attributes set }
   PUSH DS;                                           { Save segment }
   LDS DX, FileName;                                  { Filename to open }
   PUSH BP;                                           { Store register }
   INT $21;                                           { Open/create file }
   POP BP;                                            { Restore register }
   POP DS;                                            { Restore segment }
   JNC @@Exit2;                                       { Check for error }
   XOR AX, AX;                                        { Open fail return 0 }
   JMP @@Exit2
@@Win95Lfn:
   XOR CX, CX;                                        { No attributes set }
   PUSH DS;                                           { Save segment }
   mov bl, al                                         { Mode }
   xor bh, bh
   LDS DX, FileName;                                  { Filename to open }
   mov si, dx
   mov di, 0
   cmp ah, 3ch
   mov dx, 1                                          { Open }
   jne @@Open95
   mov dx, 12h                                        { Create }
   mov bx, 2
@@Open95:
   mov ax, 716Ch
   PUSH BP;                                           { Store register }
   INT $21;                                           { Open/create file }
   POP BP;                                            { Restore register }
   POP DS;                                            { Restore segment }
   JNC @@Exit2;                                       { Check for error }
   XOR AX, AX;                                        { Open fail return 0 }
   JMP @@Exit2
@@Exit2:
END;

FUNCTION AFileRead(Handle: Word; Var Buf; Count: Sw_Word;
                  Var Actual: Sw_Word): Word;
ASSEMBLER;
ASM
   XOR AX, AX;                                        { Zero register }
   LES DI, Actual;                                    { Actual var address }
   MOV ES:[DI], AX;                                   { Zero actual var }
   PUSH DS;                                           { Save segment }
   LDS DX, Buf;                                       { Data destination }
   MOV CX, Count;                                     { Amount to read }
   MOV BX, Handle;                                    { Load file handle }
   MOV AX, $3F00;                                     { Load function id }
   PUSH BP;                                           { Store register }
   INT $21;                                           { Read from file }
   POP BP;                                            { Reload register }
   POP DS;                                            { Restore segment }
   JC @@Exit4;                                        { Check for error }
   LES DI, Actual;                                    { Actual var address }
   MOV ES:[DI], AX;                                   { Update bytes moved }
   XOR AX, AX;                                        { Return success }
@@Exit4:
END;

FUNCTION AFileWrite (Handle: Word; Var Buf; Count: Sw_Word;
                    Var Actual: Sw_Word): Word;
ASSEMBLER;
ASM
   XOR AX, AX;                                        { Zero register }
   LES DI, Actual;                                    { Actual var address }
   MOV ES:[DI], AX;                                   { Zero actual var }
   PUSH DS;                                           { Save segment }
   LDS DX, Buf;                                       { Data source buffer }
   MOV CX, Count;                                     { Amount to write }
   MOV BX, Handle;                                    { Load file handle }
   MOV AX, $4000;                                     { Load function id }
   PUSH BP;                                           { Store register }
   INT $21;                                           { Write to file }
   POP BP;                                            { Reload register }
   POP DS;                                            { Restore segment }
   JC @@Exit5;                                        { Check for error }
   LES DI, Actual;                                    { Actual var address }
   MOV ES:[DI], AX;                                   { Update bytes moved }
   XOR AX, AX;                                        { Write successful }
@@Exit5:
END;

FUNCTION ASetFileSize (Handle: Word; FileSize: LongInt): Word;
ASSEMBLER;
ASM
   MOV DX, FileSize.Word[0];                          { Load file position }
   MOV CX, FileSize.Word[2];
   MOV BX, Handle;                                    { Load file handle }
   MOV AX, $4200;                                     { Load function id }
   PUSH BP;                                           { Store register }
   INT $21;                                           { Position the file }
   POP BP;                                            { Reload register }
   JC @@Exit3;                                        { Exit if error }
   XOR CX, CX;                                        { Force truncation }
   MOV BX, Handle;                                    { File handle }
   MOV AX, $4000;                                     { Load function id }
   PUSH BP;                                           { Store register }
   INT $21;                                           { Truncate file }
   POP BP;                                            { Reload register }
   JC @@Exit3;                                        { Exit if error }
   XOR AX, AX;                                        { Return successful }
@@Exit3:
END;

FUNCTION ASetFilePos (Handle: Word; Pos: LongInt; MoveType: Word;
                      Var Actual: LongInt): Word;
ASSEMBLER;
ASM
   MOV AX, MoveType;                                  { Load move type }
   MOV AH, $42;                                       { Load function id }
   MOV DX, Pos.Word[0];                               { Load file position }
   MOV CX, Pos.Word[2];
   MOV BX, Handle;                                    { Load file handle }
   PUSH BP;                                           { Store register }
   INT $21;                                           { Position the file }
   POP BP;                                            { Reload register }
   JC @@Exit6;
   LES DI, Actual;                                    { Actual var addr }
   MOV ES:[DI], AX;
   MOV ES:[DI+2], DX;                                 { Update actual }
   XOR AX, AX;                                        { Set was successful }
@@Exit6:
END;

